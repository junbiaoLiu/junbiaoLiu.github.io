[{"title":"ArchLinux安装-基础篇","url":"/2019/10/11/ArchLinux%E5%AE%89%E8%A3%85-%E5%9F%BA%E7%A1%80%E7%AF%87/","content":"<h2 id=\"ArchLinux安装-基础篇\"><a href=\"#ArchLinux安装-基础篇\" class=\"headerlink\" title=\"ArchLinux安装-基础篇\"></a>ArchLinux安装-基础篇</h2><h3 id=\"1-ArchLinux介绍\"><a href=\"#1-ArchLinux介绍\" class=\"headerlink\" title=\"1. ArchLinux介绍\"></a>1. ArchLinux介绍</h3><p><strong>Arch Linux</strong> 是一款基于 <strong>x86-64</strong> 架构的 <strong>Linux</strong> 发行版。系统主要由<strong>自由</strong>和<strong>开源软件</strong>组成，支持社区参与。系统设计以<strong>KISS原则</strong>（保持简单和愚蠢）为总体指导原则，注重代码正确、优雅和极简主义，期待用户能够愿意去理解系统的操作。 <strong>Arch Linux</strong> 系统安装、删除和更新软件的软件包管理器叫做<strong>pacman</strong></p>\n<p><strong>Arch Linux</strong> 采用<strong>滚动发行</strong>模式来获取系统更新和软件的最新版本。系统安装映像只简单地包含系统主要组件。</p>\n<p><strong>Arch Linux</strong> 以社区Wiki的形式提供文档，称为 <a href=\"https://wiki.archlinux.org/\">ArchWiki</a> 。该 Wiki 经常编有特定主题的最新信息，受到了 Linux 社区的广泛认可，内容也应用在 <strong>Arch Linux</strong> 以外的领域。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h3><h4 id=\"2-1-预留磁盘空间\"><a href=\"#2-1-预留磁盘空间\" class=\"headerlink\" title=\"2.1 预留磁盘空间\"></a>2.1 预留磁盘空间</h4><p>请确保磁盘中有一块未分配空间,以便<strong>ArchlLinux</strong>系统安装</p>\n<h4 id=\"2-2-制作启动盘\"><a href=\"#2-2-制作启动盘\" class=\"headerlink\" title=\"2.2 制作启动盘\"></a>2.2 制作启动盘</h4><p>进入<a href=\"https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/\">ArchLinux镜像下载网站</a>(此处使用清华镜像源)</p>\n<p>制作工具:<a href=\"https://sourceforge.net/projects/usbwriter/\">USBWrite</a></p>\n<h4 id=\"2-3进入启动盘\"><a href=\"#2-3进入启动盘\" class=\"headerlink\" title=\"2.3进入启动盘\"></a>2.3进入启动盘</h4><p>​        <img src=\"https://i.loli.net/2019/10/11/3RelTyMsHVq5WYk.png\" alt=\"archlinux启动选项.png\" style=\"zoom:50%;\" /></p>\n<p>​        选择第一项回车进入</p>\n<h4 id=\"2-4-检查启动模式\"><a href=\"#2-4-检查启动模式\" class=\"headerlink\" title=\"2.4 检查启动模式\"></a>2.4 检查启动模式</h4><p><code>ls /sys/firmware/efi/efivars</code></p>\n<p>若输出信息则为<strong>UEFI</strong>启动模式,否则为<strong>BIOS</strong>模式</p>\n<h4 id=\"2-5-连接网络\"><a href=\"#2-5-连接网络\" class=\"headerlink\" title=\"2.5 连接网络\"></a>2.5 连接网络</h4><p>有线网络连接:</p>\n<p><code>dhcpcd</code></p>\n<p>无线网络连接:</p>\n<p><code>wifi-menu</code>        </p>\n<p>检查连接:</p>\n<p><code>ping www.baidu.com</code></p>\n<h4 id=\"2-6-同步时间\"><a href=\"#2-6-同步时间\" class=\"headerlink\" title=\"2.6 同步时间\"></a>2.6 同步时间</h4><p><code>timedatectl set-ntp true</code></p>\n<p>此步骤正常情况下无信息输出(有时候没有消息就是最好的消息)</p>\n<h4 id=\"2-7-硬盘分区\"><a href=\"#2-7-硬盘分区\" class=\"headerlink\" title=\"2.7 硬盘分区\"></a>2.7 硬盘分区</h4><p>进入<strong>cfdisk</strong>分区工具,此工具为图形化分区工具,适合新手使用</p>\n<p><code>cfdisk</code></p>\n<p>选择<strong>gpt</strong>回车</p>\n<p>​        <img src=\"https://i.loli.net/2019/10/11/2FPNresHx6lkYZb.png\" alt=\"cfdisk工具页面.png\" style=\"zoom:50%;\" /></p>\n<p>选择<strong>Free space</strong>,然后<strong>New</strong>,输入空间大小</p>\n<p><strong>BIOS</strong>用户只需分配一个主空间即可,如下图:</p>\n<p>​        <img src=\"https://i.loli.net/2019/10/11/OfLHtYFlMPGsWpq.png\" alt=\"磁盘分配-BIOS用户.png\" style=\"zoom:50%;\" /></p>\n<p>选择<strong>Write</strong>后,输入<strong>yes</strong>保存磁盘分区方案</p>\n<p><strong>UEFI</strong>用户需要分配两个空间,一个是<strong>EFI</strong>空间(200M就行,若已有EFI空间则不用分配)</p>\n<p>另一个则是<strong>系统主空间</strong>,将余下的空闲空间全部分配给它,如下图:</p>\n<p>​        <img src=\"https://i.loli.net/2019/10/11/sLdpEbmPFehTiYN.png\" alt=\"磁盘分配-EFI用户.png\" style=\"zoom:50%;\" /></p>\n<p>记住分区信息(/dev/sda1等,后续挂载放分区需要),保存分区方案</p>\n<p>检查分区信息:</p>\n<p><code>fdisk -l</code></p>\n<p>​        <img src=\"https://i.loli.net/2019/10/11/LqfTcDp6CzxlY5Z.png\" alt=\"磁盘分区信息检查.png\" style=\"zoom:50%;\" /></p>\n<h4 id=\"2-8-格式化分区\"><a href=\"#2-8-格式化分区\" class=\"headerlink\" title=\"2.8 格式化分区\"></a>2.8 格式化分区</h4><p>以上面步骤为例.<strong>BIOS</strong>用户只需以<strong>ext4</strong>文件系统格式化主分区即可:</p>\n<p><code>mkfs.ext4 /dev/sda1</code></p>\n<p><strong>UEFI</strong>用户则需以<strong>fat32</strong>文件系统格式化<strong>EFI</strong>分区(若存在EFI分区,则不用格式化),以<strong>ext4</strong>文件系统格式化主分区:</p>\n<p><code>mkfs.fat -F32 /dev/sda1</code></p>\n<p><code>mkfs.ext4 /dev/sda2</code></p>\n<h4 id=\"2-9-挂载分区\"><a href=\"#2-9-挂载分区\" class=\"headerlink\" title=\"2.9 挂载分区\"></a>2.9 挂载分区</h4><p><strong>BIOS</strong>用户只需挂载主分区即可:</p>\n<p><code>mount /dev/sda1 /mnt</code></p>\n<p><strong>UEFI</strong>用户在挂载主分区的同时需挂载<strong>EFI</strong>分区(若存在EFI分区,则将第三步中的分区信息换成现有EFI分区信息)</p>\n<p><code>mount /dev/sda2 /mnt</code></p>\n<p><code>mkdir -p /mnt/boot/efi</code>        </p>\n<p><code>mount /dev/sda1 /mnt/boot/efi</code></p>\n<h4 id=\"2-10-配置源\"><a href=\"#2-10-配置源\" class=\"headerlink\" title=\"2.10 配置源\"></a>2.10 配置源</h4><p>因默认源在国内下载速度较慢,所以需要加入<strong>国内源</strong></p>\n<p>打开源配置文件:</p>\n<p><code>vim /etc/pacman.d/mirrorlist</code></p>\n<p>在前面加入<strong>国内源</strong>,此处使用<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/archlinux/\">清华源镜像源</a>,如下:</p>\n<p>​        <img src=\"https://i.loli.net/2019/10/11/zCbWLnjQFJvsu9R.png\" alt=\"修改源.png\" style=\"zoom:50%;\" /></p>\n<p>保存后,更新源:</p>\n<p><code>pacman -Syy</code></p>\n<h4 id=\"2-11-安装基本系统\"><a href=\"#2-11-安装基本系统\" class=\"headerlink\" title=\"2.11 安装基本系统\"></a>2.11 安装基本系统</h4><p>安装基本系统只需一条命令:</p>\n<p><code>pacstrap /mnt base base-devel</code></p>\n<p>此步需下载安装的组件较多,请耐心等待,若下载速度特别慢,请检查源配置文件中的国内源地址是否有误</p>\n<h4 id=\"2-12-生成挂载信息\"><a href=\"#2-12-生成挂载信息\" class=\"headerlink\" title=\"2.12 生成挂载信息\"></a>2.12 生成挂载信息</h4><p>此步将挂载信息写入系统文件中,以便系统重启后自动挂载分区,所以此步非常重要:</p>\n<p><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></p>\n<p>检查挂载信息,若显示挂载信息则继续接下来的步骤,若挂载信息有误,请仔细检查前面挂载步骤是否有误:</p>\n<p>​        <img src=\"https://i.loli.net/2019/10/11/snp79RNrt486UG2.png\" alt=\"挂载信息检查.png\" style=\"zoom:50%;\" /></p>\n<h4 id=\"2-13-切换系统\"><a href=\"#2-13-切换系统\" class=\"headerlink\" title=\"2.13 切换系统\"></a>2.13 切换系统</h4><p>目前我们仍处于启动盘中,需要切换到新安装的系统中操作:</p>\n<p><code>arch-chroot /mnt</code></p>\n<p>此命令非常有用,如后续系统出现问题无法启动,可插入启动盘挂载分区后切换系统进行修复</p>\n<p>切换成功,如图所示,#号前面的内容已发生变化:</p>\n<p>​        <img src=\"https://i.loli.net/2019/10/11/jxGcrTCiHyYREMI.png\" alt=\"系统切换成功.png\" style=\"zoom:50%;\" /></p>\n<h4 id=\"2-14-设置时区\"><a href=\"#2-14-设置时区\" class=\"headerlink\" title=\"2.14 设置时区\"></a>2.14 设置时区</h4><p>时间不正确的情况下易引发问题,所以此步也是很有必要的:</p>\n<p><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p>\n<p><code>hwclock --systohc</code></p>\n<h4 id=\"2-15-安装软件\"><a href=\"#2-15-安装软件\" class=\"headerlink\" title=\"2.15 安装软件\"></a>2.15 安装软件</h4><p>因为我们已经切换到了新系统中,新系统目前只包含一些基本组件,所以需要安装一些软件来帮助我们</p>\n<p><strong>ArchLinux</strong>使用<strong>pacman</strong>作为包管理器,利用<strong>pacman</strong>可以方便快捷地安装软件,如<strong>Vim</strong>:</p>\n<p><code>pacman -S vim</code></p>\n<p><strong>Vim</strong>是<strong>Linux</strong>下一个常用且高效的编辑器,熟练使用<strong>Vim</strong>可以更好地操作配置文件,以及更好地理解</p>\n<p><strong>Linux一切皆为文件</strong>的理念,帮助我们更好地使用<strong>Linux</strong>系统</p>\n<p>另外建议此处把无线网络组件安装好,以防没有有线网络的情况下进入系统无法连接无线网的尴尬情况:</p>\n<p><code>pacman -S wpa_supplicant dialog netctl wireless_tools</code></p>\n<p>开机后执行以下命令连接无线网络:</p>\n<p><code>sudo wifi-menu</code>    </p>\n<p>此命令可打开一个简易的无线网络连接图形界面,适合新手使用</p>\n<h4 id=\"2-16-设置语言选项\"><a href=\"#2-16-设置语言选项\" class=\"headerlink\" title=\"2.16 设置语言选项\"></a>2.16 设置语言选项</h4><p>编辑**/etc/locale.gen**文件:</p>\n<p><code>vim /etc/locale.gen</code></p>\n<p>在文件中找到<strong>zh_CN.UTF-8 UTF-8,zh_HK.UTF-8 UTF-8,zh_TW.UTF-8 UTF-8,en_US.UTF-8 UTF-8</strong>四个字段,        去掉行首的#号,保存退出:</p>\n<p>​        <img src=\"https://i.loli.net/2019/10/11/sYz67GcQEgCBhwn.png\" alt=\"语言选项.png\" style=\"zoom:50%;\" /></p>\n<p>更新配置文件:</p>\n<p><code>locale-gen</code></p>\n<p>然后打开(不存在时会自行创建)<strong>/etc/locale.conf</strong>文件:</p>\n<p><code>vim /etc/locale.conf</code></p>\n<p>在文件第一行加入以下内容:</p>\n<p><strong>LANG = en_US.UTF-8</strong></p>\n<p>保存并退出</p>\n<h4 id=\"2-17-设置主机名\"><a href=\"#2-17-设置主机名\" class=\"headerlink\" title=\"2.17 设置主机名\"></a>2.17 设置主机名</h4><p>打开(不存在时会自行创建)<strong>/etc/hostname</strong>文件:</p>\n<p><code>vim /etc/hostname</code></p>\n<p>在第一行输入你想设置的主机名(如:<strong>ThinkPad</strong>)</p>\n<p>保存并退出</p>\n<p>编辑**/etc/hosts**文件:</p>\n<p><code>vim /etc/hosts</code></p>\n<p>做如下修改(将ThinkPad替换成你自己设置的主机名):</p>\n<p><code>127.0.0.1    localhost.localdomain    localhost</code></p>\n<p><code>::1          localhost.localdomain    localhost</code></p>\n<p><code>127.0.1.1   ThinkPad.localdomain       ThinkPad</code></p>\n<p>保存并退出</p>\n<h4 id=\"2-18-设置Root密码\"><a href=\"#2-18-设置Root密码\" class=\"headerlink\" title=\"2.18 设置Root密码\"></a>2.18 设置Root密码</h4><p><strong>Root</strong>是<strong>Linux</strong>中具有最高权限的用户,对<strong>Root</strong>用户的操作不当会造成安全问题</p>\n<p>所以应对<strong>Root</strong>用户设置一个密码</p>\n<p>执行以下命令:</p>\n<p><code>passwd</code></p>\n<p>然后按提示输入密码后确认就可以了</p>\n<h4 id=\"2-19-新建普通用户\"><a href=\"#2-19-新建普通用户\" class=\"headerlink\" title=\"2.19 新建普通用户\"></a>2.19 新建普通用户</h4><p>前面我们提到使用<strong>Root</strong>用户操作不当会造成安全问题,所以我们新建一个普通用户来进行日常操作</p>\n<p>新建一个普通用户,名字叫jack:</p>\n<p><code>useradd -m jack</code></p>\n<p>设置密码:</p>\n<p><code>passwd jack</code></p>\n<p>按照提示输入密码确认即可</p>\n<h4 id=\"2-20-安装grub并设置引导\"><a href=\"#2-20-安装grub并设置引导\" class=\"headerlink\" title=\"2.20 安装grub并设置引导\"></a>2.20 安装grub并设置引导</h4><p>引导程序非常重要,没有它我们将无法进入系统,此处以<strong>grub</strong>为例</p>\n<p>安装<strong>intel-ucode</strong>(非Intel处理器可忽略):</p>\n<p><code>pacman -S intel-ucode</code></p>\n<p>若电脑中还有其他系统,一定要安装<strong>os-prober</strong>:</p>\n<p><code>pacman -S os-prober</code></p>\n<p>安装<strong>grub</strong>:</p>\n<p><code>pacman -S grub</code></p>\n<p><strong>BIOS</strong>用户部署<strong>grub</strong>(此处的**/dev/sda<strong>为硬盘信息而不是类似于</strong>/dev/sda1**这样的分区信息):</p>\n<p><code>grub-install --target=i386-pc /dev/sda</code>    </p>\n<p><strong>UEFI</strong>用户需要先安装<strong>efibootmgr</strong>再部署<strong>grub</strong>:</p>\n<p><code>pacman -S efibootmgr</code></p>\n<p><code>grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ArchLinux</code></p>\n<p>生成<strong>grub</strong>配置文件:</p>\n<p><code>grub-mkconfig -o /boot/grub/grub.cfg</code></p>\n<p>强烈建议检查<strong>grub</strong>配置文件,看看是否有各个系统的入口,以防无法进入系统:</p>\n<p><code>vim /boot/grub/grub.cfg</code>        </p>\n<p>检查末尾<strong>menuentry</strong>字段部分是否有系统入口,如下图:</p>\n<p>​        <img src=\"https://i.loli.net/2019/10/12/BVHN6gKZEJFs3bh.png\" alt=\"grub配置文件.png\" style=\"zoom:50%;\" /></p>\n<p>若没有发现<strong>Linux</strong>系统入口,则重新部署<strong>Linux内核</strong>后,重新生成<strong>grub</strong>配置文件:</p>\n<p><code>pacman -S linux</code></p>\n<p><code>grub-mkconfig -o /boot/grub/grub.cfg</code></p>\n<p>若有<strong>Linux</strong>系统入口,无其他系统入口(电脑中存在其他系统情况下)</p>\n<p>重启进入<strong>ArchLinux</strong>后重新生成<strong>grub</strong>配置文件:</p>\n<p><code>grub-mkconfig -o /boot/grub/grub.cfg</code>    </p>\n<p>确认无误后,退出新系统,取消挂载,重启进入系统:</p>\n<p><code>exit</code></p>\n<p><code>umount /mnt/boot/efi</code></p>\n<p><code>umount /mnt</code></p>\n<p><code>reboot</code>    </p>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h3><p>至此,一个基本的<strong>ArchLinux</strong>系统就安装好了,<strong>ArchLinux</strong>以简洁为宗旨,所以基础版系统没有图形化桌面,需要自行安装,<strong>ArchLinux</strong>的安装对于没有接触过<strong>Linux</strong>系统的新手来说有一定的难度,但这样的安装过程可以让你更好地理解你的系统,这是一个拼图的过程,你需要什么和不需要什么都由你自己决定,这也是很多人喜欢<strong>ArchLinux</strong>的原因.</p>\n<p>最后,也是最重要的一点:<strong>勇于尝试!</strong></p>\n","categories":["ArchLinux"],"tags":["技术"]},{"title":"Docker常用命令(Linux环境下)","url":"/2021/10/30/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(Linux%E7%8E%AF%E5%A2%83%E4%B8%8B)/","content":"<h1 id=\"Docker常用命令-Linux环境下\"><a href=\"#Docker常用命令-Linux环境下\" class=\"headerlink\" title=\"Docker常用命令(Linux环境下)\"></a>Docker常用命令(Linux环境下)</h1><ol>\n<li><p>Docker启动相关：</p>\n<ul>\n<li><p>启动docker： <code>systemctl start docker</code></p>\n</li>\n<li><p>查看docker运行状态：<code>systemctl status docker</code></p>\n</li>\n<li><p>重启docker：<code>systemctl restart docker</code></p>\n</li>\n<li><p>停止docker：<code>systemctl stop docker</code></p>\n</li>\n<li><p>设置docker开机自启：<code>systemctl enable docker</code></p>\n<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n<li><p>Docker镜像相关：</p>\n<ul>\n<li><p>查看本地镜像：<code>docker images</code></p>\n</li>\n<li><p>搜索远程镜像：<code>docker search 镜像名称</code></p>\n</li>\n<li><p>拉取镜像：<code>docker pull 镜像名称</code></p>\n</li>\n<li><p>删除镜像：<code>docker rmi 镜像id</code></p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>Docker容器相关：</p>\n<ul>\n<li><p>查看正在运行的容器：<code>docker ps</code></p>\n</li>\n<li><p>查看所有容器：<code>docker ps -a</code></p>\n</li>\n<li><p>交互式创建容器：<code>docker run -it --name=容器名称 镜像名称:镜像标签</code></p>\n</li>\n<li><p>守护式创建容器：<code>docker run -di --name=容器名称 镜像名称:镜像标签</code></p>\n</li>\n<li><p>登录守护式容器：<code>docker exec -it 容器名称（或容器id） /bin/bash</code></p>\n</li>\n<li><p>创建容器时挂载目录：<code>docker run -di -v 宿主机目录:容器目录 --name=容器名称 镜像名称:镜像标签</code></p>\n</li>\n<li><p>启动容器：<code>docker start 容器名称（或容器id）</code></p>\n</li>\n<li><p>停止容器：<code>docker stop 容器名称（或容器id）</code></p>\n</li>\n<li><p>将文件拷贝至容器中：<code>docker cp 需拷贝的文件或目录 容器名称:容器目录</code></p>\n</li>\n<li><p>将容器中的文件拷贝出来：<code>docker cp 容器名称:容器目录 需拷贝的文件或目录</code></p>\n</li>\n<li><p>查看容器信息：<code>docker inspect 容器名称(或容器id)</code></p>\n</li>\n<li><p>查看容器ip：<code>docker inspect --format=&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; 容器名称(或容器id)</code></p>\n</li>\n<li><p>删除容器(必须停止容器后)：<code>docker rm 容器名称(或容器id)</code></p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>Docker的迁移与备份:</p>\n<ul>\n<li><p>将容器保存为镜像：<code>docker commit 要保存的容器名称 保存后的镜像名称</code></p>\n</li>\n<li><p>备份镜像：<code>docker save -o 备份文件名称.tar 镜像名称</code></p>\n</li>\n<li><p>还原镜像：<code>docker load -i 备份文件名称.tar</code></p>\n</li>\n</ul>\n</li>\n</ol>\n","categories":["Docker"],"tags":["Docker","命令"]},{"title":"Hexo个人博客搭建-基础篇","url":"/2019/10/10/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E5%9F%BA%E7%A1%80%E7%AF%87/","content":"<h2 id=\"Hexo个人博客搭建-基础篇\"><a href=\"#Hexo个人博客搭建-基础篇\" class=\"headerlink\" title=\"Hexo个人博客搭建(基础篇)\"></a>Hexo个人博客搭建(基础篇)</h2><h3 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1. 环境准备\"></a>1. 环境准备</h3><p>hexo个人博客可以在Windows,Linux,Mac等环境下搭建,依据个人情况选择,以下示例均在ArchLinux环境下进行</p>\n<p>环境:Git,Node.js,cnpm(此包管理器可不安装,国内网速较慢,建议使用).</p>\n<p>Git:<a href=\"https://git-scm.com/\">官网下载</a></p>\n<p>archlinux用户可使用以下命令直接安装:</p>\n<p><code>sudo pacman -S git</code></p>\n<p>Node.js:<a href=\"https://nodejs.org/en/\">官网下载</a></p>\n<p>archlinux用户可使用以下命令直接安装:</p>\n<p><code>sudo pacman -S nodejs</code></p>\n<p>cnpm使用以下命令安装:</p>\n<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n<a id=\"more\"></a>\n\n<hr>\n<h3 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h3><p>使用cnpm安装hexo框架:</p>\n<p><code>cnpm install hexo-cli</code></p>\n<p>安装检查:</p>\n<p><code>hexo -v</code></p>\n<p>以下为安装成功状态:</p>\n<p>​    <img src=\"https://i.loli.net/2019/10/10/bd7ykjKiZC1ITPD.png\" alt=\"hexo安装检查.png\" style=\"zoom:50%;\" /></p>\n<hr>\n<h3 id=\"3-初始化\"><a href=\"#3-初始化\" class=\"headerlink\" title=\"3. 初始化\"></a>3. 初始化</h3><p>新建一个文件夹,名称随意,此文件夹用于存放hexo博客文件,后续操作均在此文件夹中进行:</p>\n<p><code>mkdir myblog</code></p>\n<p>进入此文件夹:</p>\n<p><code>cd myblog</code></p>\n<p>初始化hexo博客:</p>\n<p><code>sudo hexo init</code></p>\n<p>此过程可能较慢,请耐心等待</p>\n<p>初始化成功提示:</p>\n<p>​    <img src=\"https://i.loli.net/2019/10/10/2fjorzW8JOQ5Cy4.png\" alt=\"hexo初始化检查.png\" style=\"zoom:60%;\" /></p>\n<hr>\n<h3 id=\"4-启动\"><a href=\"#4-启动\" class=\"headerlink\" title=\"4. 启动\"></a>4. 启动</h3><p>启动hexo博客只需简单的一条命令:</p>\n<p><code>hexo s</code></p>\n<p>提示:</p>\n<p>​    <img src=\"https://i.loli.net/2019/10/10/QdHyvZPDOskMb1U.png\" alt=\"hexo启动检查.png\" style=\"zoom:50%;\" /></p>\n<p>按提示在浏览器中输入<a href=\"http://localhost:4000浏览网站\">http://localhost:4000浏览网站</a>:    </p>\n<p><img src=\"https://i.loli.net/2019/10/10/yGhYvsmMFRKxWPb.png\" alt=\"hexo启动预览.png\"></p>\n<hr>\n<h3 id=\"5-将网站推送到github\"><a href=\"#5-将网站推送到github\" class=\"headerlink\" title=\"5. 将网站推送到github\"></a>5. 将网站推送到github</h3><p>安装hexo推送工具:</p>\n<p><code>cnpm install --save hexo-deployer-git</code></p>\n<p>新建一个github仓库,注意仓库名格式为:<strong>github昵称.github.io</strong>(此步非常重要!!!)</p>\n<p>​    <img src=\"https://i.loli.net/2019/10/10/oFXVx5lEphg3D9y.png\" alt=\"新建github仓库.png\" style=\"zoom:50%;\" /></p>\n<p>修改配置文件:</p>\n<p><code>vim _config.yml</code></p>\n<p>找到# Depolyment字段:</p>\n<p>​    <img src=\"https://i.loli.net/2019/10/10/GRig1Bs7CEprWw2.png\" alt=\"推送设置.png\" style=\"zoom:70%;\" /></p>\n<p>在repo字段后填入仓库地址,branch字段可为空,默认分支为master</p>\n<p>推送命令:</p>\n<p><code>hexo d</code></p>\n<p>输入github账号和密码,推送成功</p>\n<p>至此,一个基础版的hexo个人博客就部署完成了,可以通过设置的仓库名称进行访问!</p>\n<h3 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6.总结\"></a>6.总结</h3><p>hexo博客属于静态博客,所有数据均以本地文件的形式进行管理,非常适合刚刚接触博客网站的朋友,</p>\n<p>其搭建过程非常简单,且在各个系统平台下均可使用,本文中搭建的是一个最基础的hexo博客,后续可以</p>\n<p>通过修改博客主题和添加功能页面的方式使你的博客更加美观,功能更加丰富.</p>\n","categories":["Hexo"],"tags":["博客"]},{"title":"Java开发小工具之Lombok","url":"/2021/10/31/Java%E5%BC%80%E5%8F%91%E5%B0%8F%E5%B7%A5%E5%85%B7%E4%B9%8BLombok/","content":"<h1 id=\"Java开发小工具之Lombok\"><a href=\"#Java开发小工具之Lombok\" class=\"headerlink\" title=\"Java开发小工具之Lombok\"></a>Java开发小工具之Lombok</h1><h2 id=\"1-Lombok简介\"><a href=\"#1-Lombok简介\" class=\"headerlink\" title=\"1. Lombok简介\"></a>1. Lombok简介</h2><p>​    Lombok是一个可以通过注解来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，也许你对Java实体类中的冗长代码已经感到厌烦，那么使用Lombok将会提高你对实体类的开发效率，让你的代码更加简洁。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2-Lombok引入\"><a href=\"#2-Lombok引入\" class=\"headerlink\" title=\"2. Lombok引入\"></a>2. Lombok引入</h2><p>​    以最常用的Maven项目为例，只需引入Lombok依赖即可：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其他引入方式可以参考<a href=\"https://projectlombok.org/\">Lombok官网</a></p>\n<h2 id=\"3-Lombok的使用\"><a href=\"#3-Lombok的使用\" class=\"headerlink\" title=\"3. Lombok的使用\"></a>3. Lombok的使用</h2><ol>\n<li>Lombok使用注解简化代码，常用注解如下：</li>\n</ol>\n<ul>\n<li>@Getter：生成getter方法</li>\n<li>@Setter：生成setter方法</li>\n<li>@NoArgsConstructor：生成无参构造方法</li>\n<li>@AllArgsConstructor：生成满参构造方法</li>\n<li>@RequiredArgsConstructor：生成包含特定参数的构造方法</li>\n<li>@EqualsAndHashCode：生成 equals(Object other) 和 hashcode() 方法</li>\n<li>@Data：包含@Getter，@Setter，@RequiredArgsConstructor，和@EqualsAndHashCode的功能</li>\n</ul>\n<ol start=\"2\">\n<li>使用示例：</li>\n</ol>\n<ul>\n<li><p>普通实体类写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(Integer id, String username, String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPassword</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPassword</span><span class=\"params\">(String password)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用Lombok后：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此可见，Lombok可以帮助我们简化很大一部分代码。</p>\n</li>\n</ul>\n<h2 id=\"4-缺点\"><a href=\"#4-缺点\" class=\"headerlink\" title=\"4. 缺点\"></a>4. 缺点</h2><p>​    Lombok虽然可以帮助我们简化实体类的代码，但是我们也要看到使用Lombok的缺点：</p>\n<ol>\n<li>侵入性高：如果我们在项目中使用了Lombok插件，这意味着协同开发此项目的所有人员都必须安装Lombok插件，否则将会导致项目编译失败。更加麻烦的是，若我们自定义的jar包中使用了Lombok，那么所有依赖此jar包的应用都要安装Lombok。</li>\n<li>升级易产生问题：由于Lombok侵入性高的特点，加之其由第三方团队进行开发与更新，所以不能保证Lombok可以支持新的JDK，在无法获得及时更新的情况下，使用Lombok的项目将会出现问题。</li>\n</ol>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>​    Lombok是一款很好用的Java开发工具，它帮助我们简化代码，提高开发效率。但与此同时，我们也应看到它存在的一些问题，如果是新项目的开发，我们可以将它列入选型之中，这有利于整个开发团队效率的提高，但面对已经趋于稳定的项目时，我们应积极沟通，不能盲目使用，以免造成团队内其他成员的困扰以及增加项目的不稳定因素。</p>\n","categories":["开发工具"],"tags":["Lombok","开发工具"]},{"title":"Java多线程基础","url":"/2021/11/19/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/","content":"<h1 id=\"Java多线程基础\"><a href=\"#Java多线程基础\" class=\"headerlink\" title=\"Java多线程基础\"></a>Java多线程基础</h1><h2 id=\"1-线程简介\"><a href=\"#1-线程简介\" class=\"headerlink\" title=\"1. 线程简介\"></a>1. 线程简介</h2><h3 id=\"1-1-Process-进程-与Thread-线程\"><a href=\"#1-1-Process-进程-与Thread-线程\" class=\"headerlink\" title=\"1.1 Process(进程)与Thread(线程)\"></a>1.1 Process(进程)与Thread(线程)</h3><ul>\n<li><p>进程是执行程序的一次执行过程，程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念，而进程是一个动态的概念，是系统资源分配的单位。</p>\n</li>\n<li><p>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然该进程就没有存在的意义，线程是CPU调度和执行的单位。</p>\n</li>\n<li><p>注意：很多线程都是模拟出来的，真正的多线程是指有多个CPU，即多核，如服务器。如果是模拟出来的多线程，即在一个CPU的情况下，在同一个时间点，CPU只能执行一个代码，因为切换地很快，所以就有同时执行的错觉。</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h3 id=\"1-2-线程的核心概念\"><a href=\"#1-2-线程的核心概念\" class=\"headerlink\" title=\"1.2 线程的核心概念\"></a>1.2 线程的核心概念</h3><ul>\n<li><p>线程就是独立的执行路径</p>\n</li>\n<li><p>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程（main()），gc线程（垃圾回收器）</p>\n</li>\n<li><p>main()称之为主线程，其为系统的入口，用于执行整个程序</p>\n</li>\n<li><p>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序不能认为是干预的</p>\n</li>\n<li><p>对同一资源操作时，会存在资源抢夺的问题，需要加入并发控制</p>\n</li>\n<li><p>线程会带来额外的开销，如CPU调度时间，并发控制开销</p>\n</li>\n<li><p>每个线程在自己的工作内存中交互，内存控制不当会造成数据不一致</p>\n</li>\n</ul>\n<h2 id=\"2-线程的创建\"><a href=\"#2-线程的创建\" class=\"headerlink\" title=\"2. 线程的创建\"></a>2. 线程的创建</h2><h3 id=\"2-1-方式一：继承Thread类\"><a href=\"#2-1-方式一：继承Thread类\" class=\"headerlink\" title=\"2.1 方式一：继承Thread类\"></a>2.1 方式一：继承Thread类</h3><ul>\n<li>子类继承Thread类具备多线程能力</li>\n<li>启动线程：子类对象.start()</li>\n<li>不建议使用：避免OOP单继承的局限性</li>\n</ul>\n<p><strong>示例1-基本使用：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建线程方式一：继承Tread类，重写run()方法，调用start()开启线程</span></span><br><span class=\"line\"><span class=\"comment\">//注意：线程开启不一定立即执行，由CPU调度执行</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// run方法线程题</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;thread1 is running...&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程对象</span></span><br><span class=\"line\">        TestThread1 testThread1 = <span class=\"keyword\">new</span> TestThread1();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用start()方法开启线程</span></span><br><span class=\"line\">        testThread1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//main线程，主线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main is running...&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例2-实现多线程同步下载图片：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//练习Thread,实现多线程同步下载图片</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;  <span class=\"comment\">//网络图片地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  <span class=\"comment\">//保存的文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestThread2</span><span class=\"params\">(String url, String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        WebDownloader webDownloader = <span class=\"keyword\">new</span> WebDownloader();</span><br><span class=\"line\">        webDownloader.downloader(url, name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;下载了文件名为：&quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程</span></span><br><span class=\"line\">        TestThread2 t1 = <span class=\"keyword\">new</span> TestThread2(</span><br><span class=\"line\">                <span class=\"string\">&quot;https://i.loli.net/2019/10/12/BVHN6gKZEJFs3bh.png&quot;</span>, <span class=\"string\">&quot;1.png&quot;</span>);</span><br><span class=\"line\">        TestThread2 t2 = <span class=\"keyword\">new</span> TestThread2(</span><br><span class=\"line\">                <span class=\"string\">&quot;https://i.loli.net/2019/10/11/sYz67GcQEgCBhwn.png&quot;</span>, <span class=\"string\">&quot;2.png&quot;</span>);</span><br><span class=\"line\">        TestThread2 t3 = <span class=\"keyword\">new</span> TestThread2(</span><br><span class=\"line\">                <span class=\"string\">&quot;https://i.loli.net/2019/10/11/jxGcrTCiHyYREMI.png&quot;</span>, <span class=\"string\">&quot;3.png&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下载器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebDownloader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//下载方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">downloader</span><span class=\"params\">(String url, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            FileUtils.copyURLToFile(<span class=\"keyword\">new</span> URL(url), <span class=\"keyword\">new</span> File(name));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-2-方式二：实现Runable接口\"><a href=\"#2-2-方式二：实现Runable接口\" class=\"headerlink\" title=\"2.2 方式二：实现Runable接口\"></a>2.2 方式二：实现Runable接口</h3><ul>\n<li>实现Runnable接口具有多线程能力</li>\n<li>启动线程：传入目标对象+Thread对象.start()</li>\n<li>推荐使用：避免了单继承的局限性，灵活方便，方便同一个对象被多个线程使用</li>\n</ul>\n<p><strong>示例1-基本使用</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建线程方式二：实现Runnable接口，重写run方法</span></span><br><span class=\"line\"><span class=\"comment\">//执行线程需要丢入runnable接口实现类，调用start方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread3</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;thread3 is running...&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建runnable接口的实现类对象</span></span><br><span class=\"line\">        TestThread3 testThread3 = <span class=\"keyword\">new</span> TestThread3();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象，通过线程对象开启线程（静态代理）</span></span><br><span class=\"line\"><span class=\"comment\">//        Thread thread = new Thread(testThread3);</span></span><br><span class=\"line\"><span class=\"comment\">//        thread.start();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(testThread3).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main is running...&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例2-多个线程使用同一对象：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//多个线程同时操作同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">//买火车票</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发现问题：多个线程操作同一资源时，线程不安全，数据紊乱</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread4</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//票数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ticketName = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ticketName &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//模拟延时</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;--&gt;拿到了第&quot;</span> + ticketName-- + <span class=\"string\">&quot;票&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        TestThread4 ticket = <span class=\"keyword\">new</span> TestThread4();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(ticket, <span class=\"string\">&quot;小明&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(ticket, <span class=\"string\">&quot;小红&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(ticket, <span class=\"string\">&quot;小刚&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>示例3-模拟龟兔赛跑：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟龟兔赛跑</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Race</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//胜利者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String winner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//模拟兔子中途休息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Thread.currentThread().getName().equals(<span class=\"string\">&quot;兔子&quot;</span>) &amp;&amp; i == <span class=\"number\">50</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//判断比赛是否结束</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> flag = gameOver(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//比赛结束，停止程序</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+ <span class=\"string\">&quot;--&gt;跑了&quot;</span> + i + <span class=\"string\">&quot;步&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断比赛是否结束</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">gameOver</span><span class=\"params\">(<span class=\"keyword\">int</span> steps)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断是否出现胜利者</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (winner != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (steps &gt;= <span class=\"number\">100</span>)&#123; <span class=\"comment\">//判断步数</span></span><br><span class=\"line\">            winner = Thread.currentThread().getName();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;winner is &quot;</span> + winner);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Race race = <span class=\"keyword\">new</span> Race();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(race, <span class=\"string\">&quot;兔子&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(race, <span class=\"string\">&quot;乌龟&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-3-方式三：实现Callable接口（初期了解即可）\"><a href=\"#2-3-方式三：实现Callable接口（初期了解即可）\" class=\"headerlink\" title=\"2.3 方式三：实现Callable接口（初期了解即可）\"></a>2.3 方式三：实现Callable接口（初期了解即可）</h3><p><strong>示例1-通过实现Callable接口的方式改造批量下载图片的代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程创建方式三：实现Callable</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 实现Callable接口的优点：</span></span><br><span class=\"line\"><span class=\"comment\">* 1.可以定义返回结果</span></span><br><span class=\"line\"><span class=\"comment\">* 2.可以抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCallable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Boolean</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;  <span class=\"comment\">//网络图片地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  <span class=\"comment\">//保存的文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestCallable</span><span class=\"params\">(String url, String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写call()方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        WebDownloader2 webDownloader2 = <span class=\"keyword\">new</span> WebDownloader2();</span><br><span class=\"line\">        webDownloader2.downloader(url, name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;下载了文件名为：&quot;</span> + name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        TestCallable t1 = <span class=\"keyword\">new</span> TestCallable(</span><br><span class=\"line\">                <span class=\"string\">&quot;https://i.loli.net/2019/10/12/BVHN6gKZEJFs3bh.png&quot;</span>, <span class=\"string\">&quot;1.png&quot;</span>);</span><br><span class=\"line\">        TestCallable t2 = <span class=\"keyword\">new</span> TestCallable(</span><br><span class=\"line\">                <span class=\"string\">&quot;https://i.loli.net/2019/10/11/sYz67GcQEgCBhwn.png&quot;</span>, <span class=\"string\">&quot;2.png&quot;</span>);</span><br><span class=\"line\">        TestCallable t3 = <span class=\"keyword\">new</span> TestCallable(</span><br><span class=\"line\">                <span class=\"string\">&quot;https://i.loli.net/2019/10/11/jxGcrTCiHyYREMI.png&quot;</span>, <span class=\"string\">&quot;3.png&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建执行服务</span></span><br><span class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//提交执行</span></span><br><span class=\"line\">        Future&lt;Boolean&gt; r1 = executorService.submit(t1);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r2 = executorService.submit(t2);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r3 = executorService.submit(t3);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取结果</span></span><br><span class=\"line\">        Boolean rs1 = r1.get();</span><br><span class=\"line\">        Boolean rs2 = r2.get();</span><br><span class=\"line\">        Boolean rs3 = r3.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关闭服务</span></span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下载器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebDownloader2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//下载方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">downloader</span><span class=\"params\">(String url, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            FileUtils.copyURLToFile(<span class=\"keyword\">new</span> URL(url), <span class=\"keyword\">new</span> File(name));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3-线程状态\"><a href=\"#3-线程状态\" class=\"headerlink\" title=\"3. 线程状态\"></a>3. 线程状态</h2><h3 id=\"3-1-线程的生命周期\"><a href=\"#3-1-线程的生命周期\" class=\"headerlink\" title=\"3.1 线程的生命周期\"></a>3.1 线程的生命周期</h3><img src=\"https://i.loli.net/2021/11/21/GCW3apfP57AZm9H.png\" alt=\"线程生命周期.PNG\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"3-2-线程常用方法\"><a href=\"#3-2-线程常用方法\" class=\"headerlink\" title=\"3.2 线程常用方法\"></a>3.2 线程常用方法</h3><table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">setPriority(int newPriority)</td>\n<td align=\"center\">更改线程的优先级</td>\n</tr>\n<tr>\n<td align=\"center\">static void sleep(long millis)</td>\n<td align=\"center\">在指定的毫秒数内让当前正在执行的线程休眠</td>\n</tr>\n<tr>\n<td align=\"center\">void join()</td>\n<td align=\"center\">等待该线程终止</td>\n</tr>\n<tr>\n<td align=\"center\">static void yield()</td>\n<td align=\"center\">暂停当前正在执行的线程对象，并执行其他线程</td>\n</tr>\n<tr>\n<td align=\"center\">void interrupt()</td>\n<td align=\"center\">中断线程（一般不使用此方式）</td>\n</tr>\n<tr>\n<td align=\"center\">boolean isAlive</td>\n<td align=\"center\">测试线程是否处于活动状态</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-3-线程终止\"><a href=\"#3-3-线程终止\" class=\"headerlink\" title=\"3.3 线程终止\"></a>3.3 线程终止</h3><ul>\n<li>不推荐使用JDK提供的stop()、destroy()方法（已废弃）</li>\n<li>推荐线程自己停下来</li>\n<li>建议使用一个标志位进行终止变量，当flag=false时，则终止线程的运行</li>\n</ul>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//终止线程</span></span><br><span class=\"line\"><span class=\"comment\">//建议时线程正常停止---&gt;利用次数，不建议死循环</span></span><br><span class=\"line\"><span class=\"comment\">//建议使用标志位---&gt;设置一个标志位</span></span><br><span class=\"line\"><span class=\"comment\">//不要使用stop或destroy等过时或者JDK不建议使用的方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStop</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.线程中定义线程体使用的标识</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//2.线程体使用该标识</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;thread is running...&quot;</span> + i++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.对外提供方法改变该标识</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestStop testStop = <span class=\"keyword\">new</span> TestStop();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(testStop).start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main&quot;</span> + i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">900</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用stop方法切换标志位，让线程停止</span></span><br><span class=\"line\">                testStop.stop();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;该线程结束了&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-4-线程休眠\"><a href=\"#3-4-线程休眠\" class=\"headerlink\" title=\"3.4 线程休眠\"></a>3.4 线程休眠</h3><ul>\n<li>sleep(毫秒数)：指定当前线程阻塞的毫秒数</li>\n<li>sleep存在异常InterruptedException</li>\n<li>sleep时间达到后线程进入就绪状态</li>\n<li>sleep可以模拟网络延时，倒计时等</li>\n<li>每一个对象都有一个锁，sleep不会释放锁</li>\n</ul>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟倒计时</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSleep2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(num--);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestSleep2()).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-5线程礼让\"><a href=\"#3-5线程礼让\" class=\"headerlink\" title=\"3.5线程礼让\"></a>3.5线程礼让</h3><ul>\n<li><p>礼让线程，让当前正在执行的线程暂停，但不阻塞</p>\n</li>\n<li><p>将线程从运行状态转为就绪状态</p>\n</li>\n<li><p>让CPU重新调度，礼让不一定成功！看CPU心情</p>\n</li>\n<li><p>*代码示例：**</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试礼让线程</span></span><br><span class=\"line\"><span class=\"comment\">//礼让不一定成功，看CPU心情</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestYield</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyYield myYield = <span class=\"keyword\">new</span> MyYield();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myYield,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(myYield,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyYield</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;线程开始执行&quot;</span>);</span><br><span class=\"line\">        Thread.yield(); <span class=\"comment\">//礼让</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;线程停止执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-6-线程强制执行\"><a href=\"#3-6-线程强制执行\" class=\"headerlink\" title=\"3.6 线程强制执行\"></a>3.6 线程强制执行</h3><ul>\n<li>join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li>\n<li>可以想象成插队</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试join方法,插队</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestJoin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;vip线程来了&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        TestJoin testJoin = <span class=\"keyword\">new</span> TestJoin();</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(testJoin);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//主线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; i++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(i == <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                 thread.join(); <span class=\"comment\">//插队</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-7-线程状态观测\"><a href=\"#3-7-线程状态观测\" class=\"headerlink\" title=\"3.7 线程状态观测\"></a>3.7 线程状态观测</h3><ul>\n<li><p>Thread.State</p>\n<ul>\n<li><p>NEW</p>\n<p>尚未启动的线程处于此状态</p>\n</li>\n<li><p>RUNNABLE</p>\n<p>在Java虚拟机中执行的线程处于此状态</p>\n</li>\n<li><p>BLOCKED</p>\n<p>被阻塞等待监视器锁定的线程处于此状态</p>\n</li>\n<li><p>WAITING</p>\n<p>正在等待另一个线程执行特定动作的线程处于此状态</p>\n</li>\n<li><p>TIMED_WAITING</p>\n<p>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</p>\n</li>\n<li><p>TERMINATED</p>\n<p>已退出的线程处于此状态</p>\n</li>\n</ul>\n</li>\n<li><p>一个线程可以在给定时间点处于一个状态，这些状态是不反映任何操作系统线程状态的虚拟机状态</p>\n</li>\n</ul>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//观察测试线程的状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;//////&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//观察启动前状态</span></span><br><span class=\"line\">        Thread.State state = thread.getState();</span><br><span class=\"line\">        System.out.println(state);  <span class=\"comment\">//NEW</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//观察启动后状态</span></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        state  = thread.getState();</span><br><span class=\"line\">        System.out.println(state);  <span class=\"comment\">//RUNNABLE</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (state != Thread.State.TERMINATED)&#123;  <span class=\"comment\">//只要线程不终止，就一直输出线程状态</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            state = thread.getState();  <span class=\"comment\">//更新线程状态</span></span><br><span class=\"line\">            System.out.println(state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-8-线程的优先级\"><a href=\"#3-8-线程的优先级\" class=\"headerlink\" title=\"3.8 线程的优先级\"></a>3.8 线程的优先级</h3><ul>\n<li>Java提供一个线程调度器来监视程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行</li>\n<li>线程的优先级用数字表示，范围由低到高1~10<ul>\n<li>Thread.MIN_PRIORITY = 1；</li>\n<li>Thread.MAX_PRIORITY = 10;</li>\n<li>Thread.NORM_PRIORITY = 5;</li>\n</ul>\n</li>\n<li>使用以下方式改变或获取优先级<ul>\n<li>getPriority().setPriority(int xxx)</li>\n</ul>\n</li>\n<li>优先级低只是意味着获得调度的概率低，并不是优先级低就不会被先调用了，这都是看CPU的调度</li>\n</ul>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试线程的优先级</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPriority</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//打印住线程的优先级</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class=\"line\"></span><br><span class=\"line\">        MyPriority myPriority = <span class=\"keyword\">new</span> MyPriority();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(myPriority,<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(myPriority,<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        Thread t3 = <span class=\"keyword\">new</span> Thread(myPriority,<span class=\"string\">&quot;t3&quot;</span>);</span><br><span class=\"line\">        Thread t4 = <span class=\"keyword\">new</span> Thread(myPriority,<span class=\"string\">&quot;t4&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//先设置优先级，再启动线程</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t3.setPriority(Thread.NORM_PRIORITY);</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t4.setPriority(Thread.MIN_PRIORITY);</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPriority</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//打印当前线程的优先级</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-9-守护-daemon-线程\"><a href=\"#3-9-守护-daemon-线程\" class=\"headerlink\" title=\"3.9 守护(daemon)线程\"></a>3.9 守护(daemon)线程</h3><ul>\n<li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li>\n<li>虚拟机必须确保用户线程执行完毕</li>\n<li>虚拟机不用等待守护线程执行完毕</li>\n<li>守护线程的作用：后台记录操作日志、监控内存、垃圾回收等</li>\n</ul>\n<p><strong>代码示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试守护线程</span></span><br><span class=\"line\"><span class=\"comment\">//上帝守护你</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDaemon</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        God god = <span class=\"keyword\">new</span> God();</span><br><span class=\"line\">        You1 you1 = <span class=\"keyword\">new</span> You1();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(god);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);  <span class=\"comment\">//默认是false表示用户线程，正常的线程都是用户线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">        thread.start(); <span class=\"comment\">//上帝守护线程启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(you1).start();  <span class=\"comment\">//用户线程启动</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上帝</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">God</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;上帝守护着你&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//你</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">You1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">36500</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你一生都开心地活着&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====goodbye! world!=====&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-线程同步\"><a href=\"#4-线程同步\" class=\"headerlink\" title=\"4. 线程同步\"></a>4. 线程同步</h2><h3 id=\"4-1-概念解释\"><a href=\"#4-1-概念解释\" class=\"headerlink\" title=\"4.1 概念解释\"></a>4.1 概念解释</h3><ul>\n<li>并发：<strong>同一个对象</strong>被<strong>多个线程</strong>同时操作</li>\n<li>队列：</li>\n<li>锁：由于同一进程的多个线程共享同一块储存空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入了**锁机制(synchronized)**，当一个线程获得对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可，但也存在以下问题：<ul>\n<li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li>\n<li>在多线程竞争下，加锁和释放锁会导致比较多的上下文切换和调度延时，引起性能问题</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致<strong>优先级倒置</strong>，引起性能问题</li>\n</ul>\n</li>\n<li>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象，这个时候我们就需要线程同步，线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面的线程使用完毕，下一个线程再使用</li>\n</ul>\n<h3 id=\"4-2-三大线程不安全案例\"><a href=\"#4-2-三大线程不安全案例\" class=\"headerlink\" title=\"4.2 三大线程不安全案例\"></a>4.2 三大线程不安全案例</h3><h4 id=\"4-2-1-线程不安全的买票程序\"><a href=\"#4-2-1-线程不安全的买票程序\" class=\"headerlink\" title=\"4.2.1 线程不安全的买票程序\"></a>4.2.1 线程不安全的买票程序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程不安全的买票案例</span></span><br><span class=\"line\"><span class=\"comment\">//线程不安全--&gt;票数出现负数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnsafeByTicket</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ByTicket byTicket = <span class=\"keyword\">new</span> ByTicket();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(byTicket, <span class=\"string\">&quot;小明&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(byTicket, <span class=\"string\">&quot;小红&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(byTicket, <span class=\"string\">&quot;小刚&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ByTicket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//票</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ticketNums = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>; <span class=\"comment\">//外部停止标志位</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//买票</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag)&#123;</span><br><span class=\"line\">            buy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有票</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ticketNums &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//模拟延时</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//买票</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;拿到&quot;</span> + ticketNums--);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-2-2-线程不安全的取钱程序\"><a href=\"#4-2-2-线程不安全的取钱程序\" class=\"headerlink\" title=\"4.2.2 线程不安全的取钱程序\"></a>4.2.2 线程不安全的取钱程序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程不安全的取钱程序--&gt;余额出现负数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnsafeBank</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//账户</span></span><br><span class=\"line\">        Account account = <span class=\"keyword\">new</span> Account(<span class=\"number\">100</span>, <span class=\"string\">&quot;基金&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Drawing you = <span class=\"keyword\">new</span> Drawing(account, <span class=\"number\">50</span>, <span class=\"string\">&quot;你&quot;</span>);</span><br><span class=\"line\">        Drawing girlFriend = <span class=\"keyword\">new</span> Drawing(account, <span class=\"number\">100</span>, <span class=\"string\">&quot;girlFriend&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        you.start();</span><br><span class=\"line\">        girlFriend.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//账户</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> money; <span class=\"comment\">//余额</span></span><br><span class=\"line\">    String name; <span class=\"comment\">//卡名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Account</span><span class=\"params\">(<span class=\"keyword\">int</span> money, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.money = money;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//银行：模拟取款</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Drawing</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    Account account; <span class=\"comment\">//账户</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> drawingMoney; <span class=\"comment\">//取了多少钱</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nowMoney; <span class=\"comment\">//现在手里有多少钱</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Drawing</span><span class=\"params\">(Account account, <span class=\"keyword\">int</span> drawingMoney, String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.account = account;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.drawingMoney = drawingMoney;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断有没有钱</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(account.money - drawingMoney &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;钱不够了，取不了&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//模拟延时,放大问题的发生性</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//卡内余额 = 当前余额 - 你取的钱</span></span><br><span class=\"line\">        account.money -= drawingMoney;</span><br><span class=\"line\">        <span class=\"comment\">//你手里的钱</span></span><br><span class=\"line\">        nowMoney += drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(account.name + <span class=\"string\">&quot;余额为：&quot;</span> + account.money);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getName() + <span class=\"string\">&quot;手里的钱：&quot;</span> + nowMoney);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-2-3-线程不安全的集合\"><a href=\"#4-2-3-线程不安全的集合\" class=\"headerlink\" title=\"4.2.3 线程不安全的集合\"></a>4.2.3 线程不安全的集合</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程不安全的集合--&gt;数据丢失</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnsafeList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                list.add(Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(list.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-3-同步方法和同步块\"><a href=\"#4-3-同步方法和同步块\" class=\"headerlink\" title=\"4.3 同步方法和同步块\"></a>4.3 同步方法和同步块</h3><h4 id=\"4-3-1-同步方法\"><a href=\"#4-3-1-同步方法\" class=\"headerlink\" title=\"4.3.1 同步方法\"></a>4.3.1 同步方法</h4><ul>\n<li><p>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是synchronized关键字，它包含两种写法，synchronized方法和synchronized块：</p>\n<p><code>同步方法：public synchronized void method(int args) &#123;&#125;</code></p>\n</li>\n<li><p>synchronized方法控制对”对象“的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行</p>\n<p><code>缺陷：若将一个大的方法声明为synchronized将会影响效率</code></p>\n</li>\n<li><p><strong>代码示例-给上文中线程不安全的买票方法加锁：</strong></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//synchronized同步方法，锁的是this</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否有票</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ticketNums &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//模拟延时</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//买票</span></span><br><span class=\"line\">    System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;拿到&quot;</span> + ticketNums--);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-3-2-同步块\"><a href=\"#4-3-2-同步块\" class=\"headerlink\" title=\"4.3.2 同步块\"></a>4.3.2 同步块</h4><ul>\n<li><p>同步块：synchronized(Obj){}</p>\n</li>\n<li><p>Obj被称之为同步监视器</p>\n<ul>\n<li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li>\n<li>同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是this，就是这个对象本身，或者是class</li>\n</ul>\n</li>\n<li><p>同步监视器的执行过程</p>\n<ul>\n<li>第一个线程访问，锁定同步监视器，执行其中的代码</li>\n<li>第二个线程访问，发现同步监视器被锁定，无法访问</li>\n<li>第一个线程访问完毕，解锁同步监视器</li>\n<li>第二个线程访问，发现同步监视器没有锁，然后锁定同步监视器并访问</li>\n</ul>\n</li>\n<li><p><strong>代码示例-给上文中线程不安全的取钱程序中的账户对象加锁：</strong></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//给account加锁，因为此对象是线程的共享资源</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (account)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断有没有钱</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(account.money - drawingMoney &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;钱不够了，取不了&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//模拟延时,放大问题的发生性</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//卡内余额 = 当前余额 - 你取的钱</span></span><br><span class=\"line\">        account.money -= drawingMoney;</span><br><span class=\"line\">        <span class=\"comment\">//你手里的钱</span></span><br><span class=\"line\">        nowMoney += drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(account.name + <span class=\"string\">&quot;余额为：&quot;</span> + account.money);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.getName() + <span class=\"string\">&quot;手里的钱：&quot;</span> + nowMoney);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>代码示例-给上文中线程不安全的集合对象加锁：</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnsafeList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (list)&#123;</span><br><span class=\"line\">                    list.add(Thread.currentThread().getName());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(list.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-4-死锁\"><a href=\"#4-4-死锁\" class=\"headerlink\" title=\"4.4 死锁\"></a>4.4 死锁</h3><h4 id=\"4-4-1-死锁问题的出现\"><a href=\"#4-4-1-死锁问题的出现\" class=\"headerlink\" title=\"4.4.1 死锁问题的出现\"></a>4.4.1 死锁问题的出现</h4><ul>\n<li><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有”两个以上对象的锁“时，就可能会发生”死锁“的问题</p>\n</li>\n<li><p>代码示例</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Makeup g1 = <span class=\"keyword\">new</span> Makeup(<span class=\"number\">0</span>, <span class=\"string\">&quot;灰姑娘&quot;</span>);</span><br><span class=\"line\">        Makeup g2 = <span class=\"keyword\">new</span> Makeup(<span class=\"number\">1</span>, <span class=\"string\">&quot;白雪公主&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        g1.start();</span><br><span class=\"line\">        g2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//口红</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lipstick</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//镜子</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mirror</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Makeup</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要的资源只有一份，使用static来保证只有一份</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Lipstick lipstick = <span class=\"keyword\">new</span> Lipstick();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Mirror mirror = <span class=\"keyword\">new</span> Mirror();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> choice; <span class=\"comment\">//选择</span></span><br><span class=\"line\">    String girlName; <span class=\"comment\">//使用化妆品的人</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Makeup(<span class=\"keyword\">int</span> choice, String girlName)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.choice = choice;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.girlName = girlName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//化妆</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            makeup();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">makeup</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (choice == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lipstick)&#123;  <span class=\"comment\">//先获得口红的锁</span></span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.girlName + <span class=\"string\">&quot;获得了口红的锁&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (mirror)&#123;  <span class=\"comment\">//一秒后想获得镜子的锁</span></span><br><span class=\"line\">                    System.out.println(<span class=\"keyword\">this</span>.girlName + <span class=\"string\">&quot;获得了镜子的锁&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (mirror)&#123;  <span class=\"comment\">//先获得镜子的锁</span></span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">this</span>.girlName + <span class=\"string\">&quot;获得了镜子的锁&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lipstick)&#123;  <span class=\"comment\">//一秒后想获得口红的锁</span></span><br><span class=\"line\">                    System.out.println(<span class=\"keyword\">this</span>.girlName + <span class=\"string\">&quot;获得了口红的锁&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-4-2-避免死锁\"><a href=\"#4-4-2-避免死锁\" class=\"headerlink\" title=\"4.4.2 避免死锁\"></a>4.4.2 避免死锁</h4><ul>\n<li>互斥条件：一个资源每次只能被一个进程使用</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li>\n<li>不剥夺条件：进程以获得的资源，在未使用完之前，不能强行剥夺</li>\n<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系</li>\n</ul>\n<p>上面列出了产生死锁的四个必要条件，我们只需打破其中任意一个或多个条件就可以避免死锁的发生</p>\n<h3 id=\"4-5-Lock-锁\"><a href=\"#4-5-Lock-锁\" class=\"headerlink\" title=\"4.5 Lock(锁)\"></a>4.5 Lock(锁)</h3><h4 id=\"4-5-1-Lock简介\"><a href=\"#4-5-1-Lock简介\" class=\"headerlink\" title=\"4.5.1 Lock简介\"></a>4.5.1 Lock简介</h4><ul>\n<li>从JDK5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步，同步锁使用Lock对象充当</li>\n<li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具，锁提供了对共享对象的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象</li>\n<li>ReentrantLock（可重入锁）类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁</li>\n</ul>\n<h4 id=\"4-5-2-Lock与synchronized的区别\"><a href=\"#4-5-2-Lock与synchronized的区别\" class=\"headerlink\" title=\"4.5.2 Lock与synchronized的区别\"></a>4.5.2 Lock与synchronized的区别</h4><ul>\n<li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域自动释放锁</li>\n<li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li>\n<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供了更多的子类）</li>\n<li>优先使用顺序：Lock &gt; 同步代码块（已经进入了方法体，分配了相应的资源）&gt; 同步方法（在方法体之外）</li>\n</ul>\n<h4 id=\"4-5-3-Lock的使用\"><a href=\"#4-5-3-Lock的使用\" class=\"headerlink\" title=\"4.5.3 Lock的使用\"></a>4.5.3 Lock的使用</h4><p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试Lock锁</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestLock2 testLock2 = <span class=\"keyword\">new</span> TestLock2();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(testLock2).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(testLock2).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(testLock2).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLock2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ticketNums = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义Lock锁</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                lock.lock();  <span class=\"comment\">//加锁</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ticketNums &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    System.out.println(ticketNums--);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();  <span class=\"comment\">//解锁</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"5-线程通信\"><a href=\"#5-线程通信\" class=\"headerlink\" title=\"5. 线程通信\"></a>5. 线程通信</h2><h3 id=\"5-1-生产者与消费者问题\"><a href=\"#5-1-生产者与消费者问题\" class=\"headerlink\" title=\"5.1 生产者与消费者问题\"></a>5.1 生产者与消费者问题</h3><ul>\n<li><p>应用场景：生产者和消费者问题</p>\n<ul>\n<li>假设仓库中只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将仓库中的产品取走消费</li>\n<li>如果仓库中没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止</li>\n<li>如果仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止</li>\n</ul>\n</li>\n<li><p>这是一个线程同步问题，生产者和消费者共享同一资源，并且生产者和消费者之间互相依赖，互为条件</p>\n<ul>\n<li><p>对于生产者，没有生产产品之前，要通知消费者等待，而生产了产品之后，有需要马上通知消费者消费</p>\n</li>\n<li><p>对于消费者，在消费之后要通知生产者已经结束消费，需要生产新的产品以供消费</p>\n</li>\n<li><p>在生产者消费者问题中，仅有synchronized是不够的</p>\n<ul>\n<li><p>synchronized可阻止并发更新同一个共享资源，实现了同步</p>\n</li>\n<li><p>synchronized不能用来实现不同线程之间的消费传递（通信）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-线程通信问题常用API\"><a href=\"#5-2-线程通信问题常用API\" class=\"headerlink\" title=\"5.2 线程通信问题常用API\"></a>5.2 线程通信问题常用API</h3><ul>\n<li><p>Java提供了几个方法来解决线程之间的通信问题</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法名</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">wait()</td>\n<td align=\"center\">表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td align=\"center\">wait(long timeout)</td>\n<td align=\"center\">指导等待的毫秒数</td>\n</tr>\n<tr>\n<td align=\"center\">notify()</td>\n<td align=\"center\">唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td align=\"center\">notifyAll()</td>\n<td align=\"center\">唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>注意：这些方法均是Object类的方法，都只能在同步方法或者同步代码中使用，否则会抛出异常：IllegalMonitorStateException</p>\n</li>\n</ul>\n<h3 id=\"5-3-解决方案1-管程法\"><a href=\"#5-3-解决方案1-管程法\" class=\"headerlink\" title=\"5.3 解决方案1-管程法\"></a>5.3 解决方案1-管程法</h3><ul>\n<li>并发协作模型“生产者/消费者模式“—&gt;管程法<ul>\n<li>生产者：负责生产数据的模块（可能是方法，对象，线程，进程）</li>\n<li>消费者：负责处理数据的模块（可能是方法，对象，线程，进程）</li>\n<li>缓冲区：消费者不能直接使用生产者的数据，他们之间有个”缓冲区“</li>\n<li>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据</li>\n</ul>\n</li>\n</ul>\n<p><strong>如下图所示：</strong></p>\n<p><img src=\"https://i.loli.net/2021/11/23/dQc46lYr1qfMeTv.png\" alt=\"生产者消费者模型.PNG\"></p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试：并发协作模型“生产者/消费者模式”---&gt;管程法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生产者，消费者，产品，缓冲区</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPC</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SynContainer synContainer = <span class=\"keyword\">new</span> SynContainer();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Productor(synContainer).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Consumer(synContainer).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生产者</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Productor</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    SynContainer synContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Productor</span><span class=\"params\">(SynContainer synContainer)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.synContainer = synContainer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生产</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            synContainer.push(<span class=\"keyword\">new</span> Chicken(i));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;生产了第&quot;</span> + i + <span class=\"string\">&quot;只鸡&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费者</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    SynContainer synContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(SynContainer synContainer)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.synContainer = synContainer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//消费</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;消费了第&quot;</span>+ synContainer.pop().id + <span class=\"string\">&quot;只鸡&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//产品</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chicken</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id; <span class=\"comment\">//产品编号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Chicken</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//缓冲区</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynContainer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置容器大小</span></span><br><span class=\"line\">    Chicken[] chickens = <span class=\"keyword\">new</span> Chicken[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//容器计数器</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生产者放入产品</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span>  <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(Chicken chicken)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果容器满了，就要等待消费者消费</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == chickens.length)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//通知消费者消费，生产者等待</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果容器还有空间，就继续丢入产品</span></span><br><span class=\"line\">        chickens[count] = chicken;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通知消费者消费</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//消费者消费产品</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Chicken <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断能否消费</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待生产者生产，消费者等待</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果可以消费</span></span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        Chicken chicken = chickens[count];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//消费完成，通知生产者生产</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> chicken;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-4-解决方案2-信号灯法\"><a href=\"#5-4-解决方案2-信号灯法\" class=\"headerlink\" title=\"5.4 解决方案2-信号灯法\"></a>5.4 解决方案2-信号灯法</h3><p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.junbiao.gaoji;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试生产者消费者问题2：信号灯法，利用标志位解决</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPC2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TV tv = <span class=\"keyword\">new</span> TV();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Player(tv).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Watcher(tv).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生产者--&gt;演员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    TV tv;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Player</span><span class=\"params\">(TV tv)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tv = tv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i % <span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.tv.play(<span class=\"string\">&quot;快乐大本营&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.tv.play(<span class=\"string\">&quot;天天向上&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费者--&gt;观众</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    TV tv;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Watcher</span><span class=\"params\">(TV tv)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tv = tv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tv.watch();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//产品--&gt;节目</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TV</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String voice; <span class=\"comment\">//录制的界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//演员录制节目，观众等待 T</span></span><br><span class=\"line\">    <span class=\"comment\">//观众观看节目，演员等待 F</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;  <span class=\"comment\">//标志位</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//录制节目</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">(String voice)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;演员录制了：&quot;</span> + voice);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.voice = voice;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通知观众观看节目</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = !<span class=\"keyword\">this</span>.flag;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//观看节目</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">watch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;观众观看了：&quot;</span> + voice);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通知演员录制节目</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = !<span class=\"keyword\">this</span>.flag;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"6-线程池\"><a href=\"#6-线程池\" class=\"headerlink\" title=\"6.线程池\"></a>6.线程池</h2><h3 id=\"6-1-线程池简介\"><a href=\"#6-1-线程池简介\" class=\"headerlink\" title=\"6.1 线程池简介\"></a>6.1 线程池简介</h3><ul>\n<li>背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大</li>\n<li>思路：提前创建好多个线程，放入线程池中，使用是直接获取，使用完后放回池中，可以避免频繁的创建与销毁、实现重复利用</li>\n<li>优点：<ul>\n<li>提高响应速度（减少了创建新线程的时间）</li>\n<li>降低资源消耗（重复利用线程池中的线程，不需要每次都创建）</li>\n<li>便于线程管理：<ul>\n<li>corePoolSize：核心池的大小</li>\n<li>maximumPoolSize：最大线程数</li>\n<li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-2-线程池的使用\"><a href=\"#6-2-线程池的使用\" class=\"headerlink\" title=\"6.2 线程池的使用\"></a>6.2 线程池的使用</h3><ul>\n<li><p>JDK5.0起提供了线程池相关API：ExecutorService和Executors</p>\n</li>\n<li><p>ExecutorService：真正的线程池接口，常见子类：ThreadPoolExecutor</p>\n<ul>\n<li><code>void execute(Runnable command)：执行任务/命令，没有返回值，一般用来执行Runnable</code></li>\n<li><code>&lt;T&gt; Futrre&lt;T&gt; submit(Callable&lt;T&gt; task)：执行任务，有返回值，一般用来执行Callable</code></li>\n<li><code>void shutdown()：关闭线程池</code></li>\n</ul>\n</li>\n<li><p>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p>\n</li>\n</ul>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试线程池</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPool</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.创建服务，创建线程池</span></span><br><span class=\"line\">        ExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.执行</span></span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> MyThread());</span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> MyThread());</span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> MyThread());</span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> MyThread());</span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> MyThread());</span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> MyThread());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.关闭服务</span></span><br><span class=\"line\">        service.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["多线程"],"tags":["多线程","java"]},{"title":"Lambda表达式","url":"/2021/11/21/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/","content":"<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><h2 id=\"1-Lambda表达式简介\"><a href=\"#1-Lambda表达式简介\" class=\"headerlink\" title=\"1. Lambda表达式简介\"></a>1. Lambda表达式简介</h2><h2 id=\"2-Lambda表达式的作用\"><a href=\"#2-Lambda表达式的作用\" class=\"headerlink\" title=\"2. Lambda表达式的作用\"></a>2. Lambda表达式的作用</h2><ul>\n<li><p>避免匿名内部类定义过多</p>\n</li>\n<li><p>可以让你的代码看起来很简洁</p>\n</li>\n<li><p>去掉了一堆没有意义的代码，只留下核心的逻辑</p>\n<a id=\"more\"></a>\n\n\n\n</li>\n</ul>\n<h2 id=\"3-函数式接口\"><a href=\"#3-函数式接口\" class=\"headerlink\" title=\"3. 函数式接口\"></a>3. 函数式接口</h2><ul>\n<li><p>理解函数式接口（Functional Interface）是学习Lambda表达式的关键所在</p>\n</li>\n<li><p>函数式接口的定义：</p>\n<ul>\n<li><p>任何接口如果只包含唯一的抽象方法，那么它就是一个函数式接口，如我们常用的Runnable接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于函数式接口，我们可以通过Lambda表达式来创建该接口的对象</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-推导Lambda表达式\"><a href=\"#4-推导Lambda表达式\" class=\"headerlink\" title=\"4. 推导Lambda表达式\"></a>4. 推导Lambda表达式</h2><ul>\n<li><strong>通过以下代码我们将推导Lambda表达式，过程：普通方式—&gt;静态内部类—&gt;局部内部类—&gt;匿名内部类—&gt;Lambda表达式</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//推导Lambda表达式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLambda1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.静态内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Like2</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILike</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I like Lambda2&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//普通方式</span></span><br><span class=\"line\">        ILike like = <span class=\"keyword\">new</span> Like();</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//静态内部类方式</span></span><br><span class=\"line\">        like = <span class=\"keyword\">new</span> Like2();</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.局部内部类</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Like3</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILike</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;I like Lambda3&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        like = <span class=\"keyword\">new</span> Like3();</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//5.匿名内部类</span></span><br><span class=\"line\">        like = <span class=\"keyword\">new</span> ILike() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;I like Lambda4&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//6.Lambda表达式</span></span><br><span class=\"line\">        like = () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I like Lambda5&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        like.lambda();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.定义一个函数式接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ILike</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.实现类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Like</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILike</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lambda</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I like Lambda&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>带参函数式接口的进一步推导：</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//带参函数式接口的进一步推导</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLambda2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Love man = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//普通方式</span></span><br><span class=\"line\">        man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\">        man.ILove(<span class=\"string\">&quot;Lambda&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Lambda表达式</span></span><br><span class=\"line\">        man = (String name) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I Love &quot;</span> + name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        man.ILove(<span class=\"string\">&quot;Lambda2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Lambda表达式简化1-忽略参数类型</span></span><br><span class=\"line\">        man = (name) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I Love &quot;</span> + name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        man.ILove(<span class=\"string\">&quot;Lambda3&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Lambda表达式简化2-简化小括号</span></span><br><span class=\"line\">        man = name -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I Love &quot;</span> + name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        man.ILove(<span class=\"string\">&quot;Lambda4&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Lambda表达式简化3-简化花括号</span></span><br><span class=\"line\">        man = name -&gt; System.out.println(<span class=\"string\">&quot;I Love &quot;</span> + name);</span><br><span class=\"line\">        man.ILove(<span class=\"string\">&quot;Lambda5&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//总结：</span></span><br><span class=\"line\">            <span class=\"comment\">//lambda表达式在方法体只有一行代码的情况下才能简化成一行，如果有多行，那就要用代码块包裹</span></span><br><span class=\"line\">            <span class=\"comment\">//使用lambda表达式的前提必须是函数式接口</span></span><br><span class=\"line\">            <span class=\"comment\">//多个参数的情况下也可以去掉参数类型，但要加上小括号</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义函数式接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Love</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ILove</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">implements</span> <span class=\"title\">Love</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ILove</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I Love &quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["JDK"],"tags":["Lambda","JDK"]},{"title":"使用Docker部署开发环境","url":"/2021/10/30/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","content":"<h1 id=\"使用Docker部署开发环境\"><a href=\"#使用Docker部署开发环境\" class=\"headerlink\" title=\"使用Docker部署开发环境\"></a>使用Docker部署开发环境</h1><h2 id=\"1-部署MySQL\"><a href=\"#1-部署MySQL\" class=\"headerlink\" title=\"1. 部署MySQL\"></a>1. 部署MySQL</h2><ol>\n<li><p>拉取MySQL镜像</p>\n<p><code>docker pull mysql</code></p>\n</li>\n<li><p>创建容器</p>\n<p><code>docker run -di --name=mysql_1 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</code></p>\n<p>解释：<code>docker run -di --name=容器名称 -p 宿主机端口:容器端口 -e 需添加的环境变量名称=值 镜像名称</code></p>\n<a id=\"more\"></a>\n\n</li>\n</ol>\n<h2 id=\"2-部署Tomcat\"><a href=\"#2-部署Tomcat\" class=\"headerlink\" title=\"2. 部署Tomcat\"></a>2. 部署Tomcat</h2><ol>\n<li><p>拉取Tomcat镜像</p>\n<p><code>docker pull tomcat</code></p>\n</li>\n<li><p>创建容器</p>\n<p><code>docker run -di --name=mytomcat -p 8080:8080 -v /usr/local/webapps:/usr/local/tomcat/webapps tomcat</code></p>\n<p>解释：<code>docker run -di --name=容器名称 -p 宿主机端口:容器端口 -v 宿主机目录:容器目录 镜像名称</code></p>\n</li>\n</ol>\n<h2 id=\"3-部署Nginx\"><a href=\"#3-部署Nginx\" class=\"headerlink\" title=\"3. 部署Nginx\"></a>3. 部署Nginx</h2><ol>\n<li><p>拉取Nginx镜像</p>\n<p><code>docker pull nginx</code></p>\n</li>\n<li><p>创建容器</p>\n<p><code>docker run -di --name=mynginx -p 80:80 nginx</code></p>\n</li>\n</ol>\n<h2 id=\"4-部署Redis\"><a href=\"#4-部署Redis\" class=\"headerlink\" title=\"4. 部署Redis\"></a>4. 部署Redis</h2><ol>\n<li><p>拉取Redis镜像</p>\n<p><code>docker pull redis</code></p>\n</li>\n<li><p>创建容器<br><code>docker run -di --name=myredis -p 6379:6379 redis</code></p>\n</li>\n</ol>\n<h2 id=\"5-部署Docker私有仓库\"><a href=\"#5-部署Docker私有仓库\" class=\"headerlink\" title=\"5. 部署Docker私有仓库\"></a>5. 部署Docker私有仓库</h2><ol>\n<li><p>拉取registry镜像</p>\n<p><code>docker pull registry</code></p>\n</li>\n<li><p>创建容器</p>\n<p><code>docker run -di --name=myregistry -p 5000:5000 registry</code></p>\n</li>\n<li><p>修改daemon.json使docker信任私有仓库</p>\n<p><code>vim /etc/docker/daemon.json</code></p>\n<p>添加以下内容：</p>\n<p><code>&#123;&quot;insecure-registries&quot;: [&quot;私有仓库ip地址:5000&quot;]&#125;</code></p>\n<p>重启docker服务生效</p>\n</li>\n<li><p>标记要上传至私有仓库的镜像</p>\n<p><code>docker tag 镜像名称 私有仓库ip地址:5000/标记名称</code></p>\n</li>\n<li><p>上传标记的镜像</p>\n<p><code>docker push 私有仓库ip地址:5000/标记名称</code></p>\n</li>\n</ol>\n","categories":["Docker"],"tags":["Docker","开发环境"]},{"title":"数据库设计之三范式","url":"/2021/10/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%B8%89%E8%8C%83%E5%BC%8F/","content":"<h1 id=\"数据库设计之三范式\"><a href=\"#数据库设计之三范式\" class=\"headerlink\" title=\"数据库设计之三范式\"></a>数据库设计之三范式</h1><h3 id=\"数据库设计范式是数据库表设计的依据，按照范式设计数据表可以减少数据冗余。\"><a href=\"#数据库设计范式是数据库表设计的依据，按照范式设计数据表可以减少数据冗余。\" class=\"headerlink\" title=\"数据库设计范式是数据库表设计的依据，按照范式设计数据表可以减少数据冗余。\"></a>数据库设计范式是数据库表设计的依据，按照范式设计数据表可以减少数据冗余。</h3><h4 id=\"1-第一范式-1NF-：任何一张数据表都应该有主键，并且表中的每一字段都不可再分，保证字段的原子性。\"><a href=\"#1-第一范式-1NF-：任何一张数据表都应该有主键，并且表中的每一字段都不可再分，保证字段的原子性。\" class=\"headerlink\" title=\"1. 第一范式(1NF)：任何一张数据表都应该有主键，并且表中的每一字段都不可再分，保证字段的原子性。\"></a>1. 第一范式(1NF)：任何一张数据表都应该有主键，并且表中的每一字段都不可再分，保证字段的原子性。</h4><ul>\n<li><p>错误示例：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">学生编号</th>\n<th align=\"center\">学生姓名</th>\n<th align=\"center\">联系方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1001</td>\n<td align=\"center\">张三</td>\n<td align=\"center\"><a href=\"mailto:&#x7a;&#115;&#x40;&#x67;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;\">&#x7a;&#115;&#x40;&#x67;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;</a>,13548302093</td>\n</tr>\n<tr>\n<td align=\"center\">1002</td>\n<td align=\"center\">李四</td>\n<td align=\"center\"><a href=\"mailto:&#x6c;&#115;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;\">&#x6c;&#115;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>,15683934924</td>\n</tr>\n<tr>\n<td align=\"center\">1001</td>\n<td align=\"center\">王五</td>\n<td align=\"center\"><a href=\"mailto:&#x77;&#x77;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;\">&#x77;&#x77;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>,13420932882</td>\n</tr>\n</tbody></table>\n<p>上表中没有设计主键，且联系方式字段非原子性，还可再分。<a id=\"more\"></a></p>\n</li>\n<li><p>正确示例：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">学生编号（PK）</th>\n<th align=\"center\">学生姓名</th>\n<th align=\"center\">邮箱地址</th>\n<th align=\"center\">联系电话</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1001</td>\n<td align=\"center\">张三</td>\n<td align=\"center\"><a href=\"mailto:&#122;&#x73;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;\">&#122;&#x73;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;</a></td>\n<td align=\"center\">13548302093</td>\n</tr>\n<tr>\n<td align=\"center\">1002</td>\n<td align=\"center\">李四</td>\n<td align=\"center\"><a href=\"mailto:&#x6c;&#115;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;\">&#x6c;&#115;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></td>\n<td align=\"center\">15683934924</td>\n</tr>\n<tr>\n<td align=\"center\">1003</td>\n<td align=\"center\">王五</td>\n<td align=\"center\"><a href=\"mailto:&#119;&#x77;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;\">&#119;&#x77;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></td>\n<td align=\"center\">13420932882</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h4 id=\"2-第二范式-2NF-：在第一范式的基础上，数据表中所有的非主键字段必须完全依赖主键，不能产生部分依赖。\"><a href=\"#2-第二范式-2NF-：在第一范式的基础上，数据表中所有的非主键字段必须完全依赖主键，不能产生部分依赖。\" class=\"headerlink\" title=\"2. 第二范式(2NF)：在第一范式的基础上，数据表中所有的非主键字段必须完全依赖主键，不能产生部分依赖。\"></a>2. 第二范式(2NF)：在第一范式的基础上，数据表中所有的非主键字段必须完全依赖主键，不能产生部分依赖。</h4><ul>\n<li><p>错误示例：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">学生编号（PK）</th>\n<th align=\"center\">教师编号（PK）</th>\n<th align=\"center\">学生姓名</th>\n<th align=\"center\">教师姓名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1001</td>\n<td align=\"center\">001</td>\n<td align=\"center\">张三</td>\n<td align=\"center\">王老师</td>\n</tr>\n<tr>\n<td align=\"center\">1002</td>\n<td align=\"center\">002</td>\n<td align=\"center\">李四</td>\n<td align=\"center\">赵老师</td>\n</tr>\n<tr>\n<td align=\"center\">1003</td>\n<td align=\"center\">001</td>\n<td align=\"center\">王五</td>\n<td align=\"center\">王老师</td>\n</tr>\n<tr>\n<td align=\"center\">1001</td>\n<td align=\"center\">003</td>\n<td align=\"center\">张三</td>\n<td align=\"center\">李老师</td>\n</tr>\n</tbody></table>\n<p>以上表虽然符合第一范式(1NF)，但是学生姓名和教师姓名两个字段产生了冗余，因为学生姓名只依赖学生编号这个主键而不依赖教师编号，同样的，教师姓名只依赖教师编号这个主键而不依赖学生编号，这就产生了部分依赖，故不符合第二范式(2NF)。</p>\n</li>\n<li><p>正确示例：</p>\n<p>学生表（t_student）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">学生编号（PK）</th>\n<th align=\"center\">学生姓名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1001</td>\n<td align=\"center\">张三</td>\n</tr>\n<tr>\n<td align=\"center\">1002</td>\n<td align=\"center\">李四</td>\n</tr>\n<tr>\n<td align=\"center\">1003</td>\n<td align=\"center\">王五</td>\n</tr>\n</tbody></table>\n<p>教师表（t_teacher）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">教师编号（PK）</th>\n<th align=\"center\">教师姓名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">001</td>\n<td align=\"center\">王老师</td>\n</tr>\n<tr>\n<td align=\"center\">002</td>\n<td align=\"center\">赵老师</td>\n</tr>\n<tr>\n<td align=\"center\">003</td>\n<td align=\"center\">李老师</td>\n</tr>\n</tbody></table>\n<p>学生教师关系表（t_student_teacher_relation）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id（PK）</th>\n<th align=\"center\">学生编号（fk）</th>\n<th align=\"center\">教师编号（FK）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">1001</td>\n<td align=\"center\">001</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">1002</td>\n<td align=\"center\">002</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">1003</td>\n<td align=\"center\">001</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">1001</td>\n<td align=\"center\">003</td>\n</tr>\n</tbody></table>\n<p>在多对多的关系中，我们可以利用中间表来存放两表间的关系，防止产生部分依赖（<strong>多对多？三张表，关系表有两外键</strong>）。</p>\n</li>\n</ul>\n<h4 id=\"3-第三范式-3NF-：在第二范式的基础上，数据表中的所有非主键字段直接依赖主键字段，不能产生传递依赖。\"><a href=\"#3-第三范式-3NF-：在第二范式的基础上，数据表中的所有非主键字段直接依赖主键字段，不能产生传递依赖。\" class=\"headerlink\" title=\"3.  第三范式(3NF)：在第二范式的基础上，数据表中的所有非主键字段直接依赖主键字段，不能产生传递依赖。\"></a>3.  第三范式(3NF)：在第二范式的基础上，数据表中的所有非主键字段直接依赖主键字段，不能产生传递依赖。</h4><ul>\n<li><p>错误示例：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">学生编号（PK）</th>\n<th align=\"center\">学生姓名</th>\n<th align=\"center\">班级编号</th>\n<th align=\"center\">班级名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1001</td>\n<td align=\"center\">张三</td>\n<td align=\"center\">01</td>\n<td align=\"center\">一年一班</td>\n</tr>\n<tr>\n<td align=\"center\">1002</td>\n<td align=\"center\">李四</td>\n<td align=\"center\">02</td>\n<td align=\"center\">一年二班</td>\n</tr>\n<tr>\n<td align=\"center\">1003</td>\n<td align=\"center\">王五</td>\n<td align=\"center\">03</td>\n<td align=\"center\">一年三班</td>\n</tr>\n<tr>\n<td align=\"center\">1004</td>\n<td align=\"center\">赵六</td>\n<td align=\"center\">04</td>\n<td align=\"center\">一年三班</td>\n</tr>\n</tbody></table>\n<p>上表符合第二范式(2NF)，但班级名称存在冗余，因为班级名称并不直接依赖于主键学生编号，而是依赖与班级编号，班级编号又依赖于学生编号，这就产生了传递依赖，故不符合第三范式(3NF)，解决方案是对此数据表进行拆分。</p>\n</li>\n<li><p>正确示例：</p>\n<p>学生信息表（t_student）:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">学生编号（PK）</th>\n<th align=\"center\">学生姓名</th>\n<th align=\"center\">班级编号（FK）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1001</td>\n<td align=\"center\">张三</td>\n<td align=\"center\">01</td>\n</tr>\n<tr>\n<td align=\"center\">1002</td>\n<td align=\"center\">李四</td>\n<td align=\"center\">02</td>\n</tr>\n<tr>\n<td align=\"center\">1003</td>\n<td align=\"center\">王五</td>\n<td align=\"center\">03</td>\n</tr>\n<tr>\n<td align=\"center\">1004</td>\n<td align=\"center\">赵六</td>\n<td align=\"center\">04</td>\n</tr>\n</tbody></table>\n<p>班级信息表（t_class）:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">班级编号（PK）</th>\n<th align=\"center\">班级名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">01</td>\n<td align=\"center\">一年一班</td>\n</tr>\n<tr>\n<td align=\"center\">02</td>\n<td align=\"center\">一年二班</td>\n</tr>\n<tr>\n<td align=\"center\">03</td>\n<td align=\"center\">一年三班</td>\n</tr>\n<tr>\n<td align=\"center\">04</td>\n<td align=\"center\">一年四班</td>\n</tr>\n</tbody></table>\n<p>经过对原数据表的拆分，有效防止了传递依赖的产生（<strong>一对多？两张表，多的表加外键</strong>）。</p>\n</li>\n</ul>\n<h4 id=\"4-一对一关系的设计\"><a href=\"#4-一对一关系的设计\" class=\"headerlink\" title=\"4. 一对一关系的设计\"></a>4. 一对一关系的设计</h4><p>​    一对一关系设计有两种方法：主键共享、外键唯一</p>\n<ol>\n<li><p>主键共享：</p>\n<ul>\n<li><p>用户登录表（t_user_login）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id（PK）</th>\n<th align=\"center\">用户名</th>\n<th align=\"center\">密码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">zs</td>\n<td align=\"center\">11111</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">ls</td>\n<td align=\"center\">22222</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">ww</td>\n<td align=\"center\">33333</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>用户信息表（t_user_detail）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id（PK+FK）</th>\n<th align=\"center\">真实姓名</th>\n<th align=\"center\">联系电话</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">张三</td>\n<td align=\"center\">13548302093</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">李四</td>\n<td align=\"center\">15683934924</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">王五</td>\n<td align=\"center\">13420932882</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>外键唯一：</p>\n<ul>\n<li><p>用户登录表（t_user_login）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id（PK）</th>\n<th align=\"center\">用户名</th>\n<th align=\"center\">密码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">zs</td>\n<td align=\"center\">11111</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">ls</td>\n<td align=\"center\">22222</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">ww</td>\n<td align=\"center\">33333</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>用户信息表（t_user_detail）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id（PK）</th>\n<th align=\"center\">真实姓名</th>\n<th align=\"center\">联系电话</th>\n<th align=\"center\">userid（FK+unique）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">张三</td>\n<td align=\"center\">13548302093</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">李四</td>\n<td align=\"center\">15683934924</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">王五</td>\n<td align=\"center\">13420932882</td>\n<td align=\"center\">3</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"5-注意事项\"><a href=\"#5-注意事项\" class=\"headerlink\" title=\"5. 注意事项\"></a>5. 注意事项</h4><p>​    在实际的开发中，我们应该以满足客户的需求为主，不一定要严格按照三范式进行数据库设计，有时需要拿冗余换取执行速度。</p>\n","categories":["数据库设计"],"tags":["数据库"]},{"title":"设计模式","url":"/2021/11/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","content":"<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><h2 id=\"1-什么是设计模式\"><a href=\"#1-什么是设计模式\" class=\"headerlink\" title=\"1. 什么是设计模式\"></a>1. 什么是设计模式</h2><p>​        设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。他不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的理解。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2-理解设计模式的作用\"><a href=\"#2-理解设计模式的作用\" class=\"headerlink\" title=\"2. 理解设计模式的作用\"></a>2. 理解设计模式的作用</h2><ul>\n<li>可以提高程序员的思维能力、编程能力和设计能力。</li>\n<li>使程序设计标准化、代码编写更加工程化，提高软件开发效率，缩短软件开发周期。</li>\n<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li>\n</ul>\n<h2 id=\"3-GoF-23\"><a href=\"#3-GoF-23\" class=\"headerlink\" title=\"3. GoF 23\"></a>3. GoF 23</h2><p>​        1995年，GoF（Gang of Four, 四人组）合作出版了《设计模式：可复用面向对象软件的基础》一书，共收录了23种设计模式，从此树立了软件设计模式领域的里程碑，被人们称为<strong>“GoF设计模式”</strong>。</p>\n<ul>\n<li><strong>GoF 23</strong>：<ul>\n<li>一种思维，一种态度，一种进步</li>\n</ul>\n</li>\n<li><strong>创建型模式（对象的创建与使用分离）：</strong><ul>\n<li>单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</li>\n</ul>\n</li>\n<li><strong>结构型模式（对象的组合）：</strong><ul>\n<li>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</li>\n</ul>\n</li>\n<li><strong>行为型模式（对象的相互协作）：</strong><ul>\n<li>模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-面向对象（OOP）的七大原则\"><a href=\"#4-面向对象（OOP）的七大原则\" class=\"headerlink\" title=\"4. 面向对象（OOP）的七大原则\"></a>4. 面向对象（OOP）的七大原则</h2><ul>\n<li><strong>开闭原则（总纲）：</strong>对扩展开放，对修改关闭。</li>\n<li><strong>里氏替换原则：</strong>继承必须确保父类所拥有的性质在子类中仍然成立。</li>\n<li><strong>依赖倒置原则</strong>：面向接口编程，不要面向实现编程，抽象不依赖细节，细节必须依赖抽象。</li>\n<li><strong>单一职责原则：</strong>控制类的粒度大小，将对象解耦，提高其内聚性，一个方法干好一件事情。</li>\n<li><strong>接口隔离原则：</strong>为各个类建立它们需要的专用接口。</li>\n<li><strong>迪米特法则：</strong>只与你的直接朋友交谈，不跟”陌生人“说话（A-&gt;B-&gt;C，不能直接A-&gt;C）。</li>\n<li><strong>合成复用原则：</strong>尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</li>\n</ul>\n","categories":["设计模式"],"tags":["笔记","设计模式"]},{"title":"设计模式之单例模式","url":"/2021/11/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","content":"<h1 id=\"设计模式之单例模式\"><a href=\"#设计模式之单例模式\" class=\"headerlink\" title=\"设计模式之单例模式\"></a>设计模式之单例模式</h1><p>​        单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n<h2 id=\"1-饿汉式单例\"><a href=\"#1-饿汉式单例\" class=\"headerlink\" title=\"1. 饿汉式单例\"></a>1. 饿汉式单例</h2>","categories":["设计模式"],"tags":["设计模式","单例模式"]}]